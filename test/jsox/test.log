

  JSON6.escape
    âˆš Escapes
    âˆš Handles empty string

  Bad tests
    âˆš space error "tr "
    âˆš space error "[tr ]"
got back: { a: 'tr' }
    âˆš space error "{a:tr }"
    âˆš Unquoted space in identifier
    âˆš Missing colon array?
    âˆš Missing colon object?
    âˆš String unquoted?
    âˆš Throws with colon in array
    âˆš Throws with comma outside objects
    âˆš Throws with curly bracket outside objects
    âˆš comma after object field and : 
    âˆš object close after object field and : 
    âˆš bad hex escape : 
    âˆš bad unicode escape : 
    âˆš throws with quoted field name after no comma : 
    âˆš throws with unquoted field name after no comma: 

  Stream testing
4 objects...
got 4 objects?
02:24:49.445|1428000060C8~sack.cc(68978):Unhandled value type preceeding object open: 5 ÝÝÝÝÝÝÝÝÝÝÝÝÝÝÝ·»É»ÝG
    âˆš Receives various values via `write`

  JSON6 test object 2
{
  '@std/esm': true,
  author: 'John-David Dalton <john.david.dalton@gmail.com>',
  description: 'Enable ES modules in Node today!',
  devDependencies: {
    '@babel/core': '^7.0.0-beta.34',
    '@babel/plugin-proposal-class-properties': '^7.0.0-beta.34',
    '@babel/plugin-transform-block-scoping': '^7.0.0-beta.34',
    '@babel/preset-env': '^7.0.0-beta.34',
    '@babel/register': '^7.0.0-beta.34',
    acorn: '^5.2.1',
    ava: '^0.24.0',
    'babel-eslint': '^8.0.3',
    'babel-loader': '^8.0.0-beta.0',
    'babel-plugin-transform-for-of-as-array': '^1.0.4',
    download: '^6.2.5',
    eslint: '^4.12.0',
    'eslint-plugin-import': '^2.7.0',
    'eslint-plugin-node': '^5.2.0',
    execa: '^0.8.0',
    'fs-extra': '^4.0.3',
    globby: '^7.1.1',
    husky: '^0.14.3',
    jest: '^21.2.1',
    'json-6': '^0.1.120',
    minizlib: '^1.0.4',
    mocha: '^4.0.1',
    'mock-stdio': '^1.0.0',
    nop: '^1.0.0',
    nyc: '^11.3.0',
    'optimize-js-plugin': '0.0.4',
    'optional-dev-dependency': '^2.0.1',
    pify: '^3.0.0',
    pm2: '^2.8.0',
    semver: '^5.4.1',
    trash: '^4.2.1',
    typescript: '^2.6.1',
    'uglify-es': '^3.2.1',
    'uglifyjs-webpack-plugin': '^1.1.1',
    webpack: '^3.10.0',
    'webpack-bundle-analyzer': '^2.8.3',
    'webpack-common-shake': '^1.5.3',
    yargs: '^10.0.3'
  },
  engines: { node: '>=4' },
  files: [ 'index.js', 'esm.js.gz' ],
  keywords: 'commonjs, ecmascript, export, import, modules, node, require',
  license: 'MIT',
  main: 'index.js',
  name: '@std/esm',
  optionalDevDependencies: { 'node-zopfli': '^2.0.2' },
  private: true,
  repository: 'standard-things/esm',
  scripts: {
    build: 'node script/build.js',
    'build:prod': 'npm run build -- --prod',
    clean: 'node script/clean.js',
    lint: "eslint \\'**/*.{js,mjs}\\' --fix --quiet",
    'prebuild:prod': 'optional-dev-dependency',
    precommit: 'npm run lint',
    prelint: 'npm run pretest',
    prepub: 'npm run test:prod',
    pretest: 'npm run build -- --test',
    'pretest:prod': 'npm run build:prod -- --test',
    pub: 'node script/publish.js',
    test: 'node script/test.js',
    'test:prod': 'node script/test.js --prod'
  },
  version: '0.18.0'
}
    âˆš Parses (`package.json`) object

  Objects and arrays
    âˆš Simple array with number
    âˆš Simple nested array with number
[ { a: '', b: '' }, { a: '', b: '' } ]
    âˆš Array of objects
[ true, false, NaN, NaN, -Infinity, Infinity, undefined ]
    âˆš Array with various types
{
  a: true,
  b: false,
  c: NaN,
  d: NaN,
  e: -Infinity,
  f: Infinity,
  h: null
}
    âˆš Object with various types
[ {} ]
    âˆš Array with empty object
[ { a: '', b: '' }, [ 1, 2 ], { a: '', b: '' } ]
    âˆš Array of objects and array
{
  a: { a: '', b: '' },
  b: [ { d: '', e: '' }, { f: '', g: '' } ],
  c: { a: '', b: '' }
}
    âˆš Object with child objects and arrays

  Basic parsing
    Whitespace
      âˆš accepts space before colon
      âˆš accepts space before colon
    Numbers
      âˆš Simple decimal
02:24:49.452|1428000060C8~jsoxparse.cc(942):WARNING: Extra data after JSOX message; Single message parse expects a closed, complete message.
      âˆš Decimal with bad character
      âˆš Decimal with separators
      âˆš Leading plain zero octals treated as decimals
      âˆš Ignores treating plain zero octals as decimals
      âˆš Octal specified octals
      âˆš Octal specified octals (capital)
      âˆš Hexadecimal
      âˆš Hexadecimal (capital)
      âˆš Binary
      âˆš Binary (capital)
    Special numbers
      âˆš NaN
      âˆš -NaN
      âˆš Infinity
      âˆš -Infinity
    Strings
      âˆš String as number
      âˆš String with non-BMP characters
      âˆš String standard whitespace escape characters
      âˆš String standard whitespace escape characters
      âˆš String standard whitespace escape characters
    Comments
      âˆš Should throw with invalid comment
      âˆš Should throw with incomplete comment (single slash)
      âˆš Should throw with incomplete comment (closing asterisk)
      âˆš Should not err (will warn) with comment begun at end
02:24:49.457|1428000060C8~jsoxparse.cc(942):WARNING: Extra data after JSOX message; Single message parse expects a closed, complete message.
      âˆš Should not err (will warn) with comment begun at end
      âˆš Should throw with incomplete comment with 2 asterisks
      âˆš Should throw with incomplete comment with 3 asterisks
      âˆš Should handle comment
    Other
      âˆš null
      âˆš null as `null`
      âˆš true
      âˆš false
      âˆš undefined
    Objects
      âˆš Handles trailing commas
      Keys
        âˆš Double-quoted key
        âˆš empty object
        âˆš Back-tick quoted key
        âˆš Carriage return within key
        âˆš Newline within key
        âˆš Should throw with extra single quotes within key
      Key values
        âˆš Decimal key value
        âˆš ES6 template key value
        âˆš Double-quoted key value
        âˆš Single-quoted key value (with newline)
        âˆš Single-quoted key value (with trailing backslash and newline)
        âˆš Single-quoted key value with backslash, carriage return, and newline
        âˆš Single-quoted key value with backslash and line separator
        âˆš Single-quoted key value with backslash and paragraph separator
        âˆš Unquoted keyword (true)
        âˆš Unquoted keyword (null)
        âˆš Handles trailing commas
    Arrays
      âˆš Simple array

  Parsing with reviver
    âˆš With simple reviver
    âˆš Reviver which deletes

  Basic parsing
    Dates
      âˆš converts to same date
      âˆš converts from the same date
      âˆš converts to and from the same date
    BigInt
      âˆš converts to same
      âˆš converts from the same
      âˆš converts to and from the same
    array Buffer
      âˆš converts to same
      âˆš converts from the same
      âˆš converts to and from the same
    references
      âˆš converts to same
      âˆš converts from the same
      âˆš converts to and from the same

  Numbers
    âˆš Decimal
    âˆš Positive decimal
    âˆš Negative decimal
    âˆš Decimal with scientific notation
    âˆš Decimal with bad scientific notation (throws)
typeof( n ) = number 123
typeof( result ) = number 123
    âˆš Decimal with positive scientific notation
typeof( n ) = number 0.000123
typeof( result ) = number 0.000123
    âˆš Decimal with negative scientific notation
typeof( n ) = number 291
typeof( result ) = number 291
    âˆš Hexadecimal

  Streaming
    âˆš Streams various objects
    âˆš Converts non-string to string and attempts to process
    âˆš handles incomplete string key in chunks
    âˆš Supports reviver

  String escapes
    Octal escapes
      âˆš Does not parses string octal escape
      âˆš Does not parse string octal escape followed by character
    Unicode escape
      âˆš Throws with bad Unicode escape
    Unicode wide escapes
      âˆš Parses Unicode wide escape (lower-case)
      âˆš Parses Unicode wide escape (upper-case)
      âˆš Throws with bad Unicode wide escape (upper-case)
      âˆš Throws with incomplete Unicode wide escape (upper-case)
    String hex escapes
      âˆš Parses string hex
      âˆš Throws with bad hex escape
    Single escapes
      âˆš \b
      âˆš \f
      âˆš Should throw with string closing without successor to backslash
      âˆš should consume carriage return escape at end of string
      âˆš should recover character after carriage return escape at end of string

  Single JSON6
02:24:49.475|1428000060C8~jsoxparse.cc(942):WARNING: Extra data after JSOX message; Single message parse expects a closed, complete message.
    âˆš Single JSON6

  Carriage return escape
    âˆš drops

  Unicode escape
    âˆš escapes unicode whitespace
    âˆš escapes unicode whitespace

  Incomplete String Escape tests
    âˆš Parses string octal escape followed by character

  JSON streaming
    âˆš Parses multiple and split strings

  JSON decoding
MNOP= MNOP
    âˆš Unicode escapes

  Object keys
    Erring
      âˆš Unencapsulated hyphenated key with space
      âˆš Unencapsulated hyphenated key with spaces
      âˆš Unencapsulated key with nested array
      âˆš Unencapsulated key with opening array bracket
      âˆš Unencapsulated key with closing array bracket
      âˆš Unencapsulated key with opening array bracket and space
      âˆš Unencapsulated key with closing array bracket and space
      âˆš Key with quote not at beginning
    Functional
result: { 'my  -  key': 3 }
      âˆš Parses encapsulated key
result: { 'my  -  key': 3 }
      âˆš Parses encapsulated key with carriage return
result: { 'my-key\\m&m+*|': 3 }
      âˆš Parses key with special characters but no spaces
result: { 'my-key': 3 }
      âˆš Parses key with special characters and comment
result: { 'my-key': 3 }
      âˆš Parses key with special characters and multi-line comment
result: { A: 3 }
      âˆš Parses key with ZWNBS (ignoring it)


  143 passing (57ms)

